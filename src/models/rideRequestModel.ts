// models/Ride.ts
import { DataTypes, Model, Optional } from 'sequelize';
import sequelize from '../config/database'; // assuming sequelize is configured

// Define the attributes interface
interface RideAttributes {
  id: number; // This field is auto-generated by Sequelize
  riderId: number;
  driverId?: number | null;
  pickupLocation: string;
  destinationLocation: string;
  carType: string;
  price: number;
  status: 'pending' | 'accepted' | 'completed' | 'cancelled';
  createdAt?: Date;
  updatedAt?: Date;
}

// Define creation attributes, making the 'id' field optional
interface RideCreationAttributes extends Optional<RideAttributes, 'id'> {}

class Ride extends Model<RideAttributes, RideCreationAttributes> implements RideAttributes {
  public id!: number;
  public riderId!: number;
  public driverId?: number | null;
  public pickupLocation!: string;
  public destinationLocation!: string;
  public carType!: string;
  public price!: number;
  public status!: 'pending' | 'accepted' | 'completed' | 'cancelled';

  public readonly createdAt!: Date;
  public readonly updatedAt!: Date;
}

Ride.init(
  {
      riderId: {
          type: DataTypes.INTEGER,
          allowNull: false,
      },
      driverId: {
          type: DataTypes.INTEGER,
          allowNull: true,
          defaultValue: null,
      },
      pickupLocation: {
          type: DataTypes.STRING,
          allowNull: false,
      },
      destinationLocation: {
          type: DataTypes.STRING,
          allowNull: false,
      },
      carType: {
          type: DataTypes.STRING,
          allowNull: false,
      },
      price: {
          type: DataTypes.FLOAT,
          allowNull: false,
      },
      status: {
          type: DataTypes.ENUM('pending', 'accepted', 'completed', 'cancelled'),
          defaultValue: 'pending',
      },
      id: ''
  },
  {
    sequelize,
    tableName: 'rides',
    timestamps: true,
    underscored: true,
  }
);

export default Ride;
